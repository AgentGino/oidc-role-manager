name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        flake8 oidc_role_manager cli.py --max-line-length=88 --extend-ignore=E203

    - name: Format check with black
      run: |
        black --check oidc_role_manager cli.py

    - name: Import sort check with isort
      run: |
        isort --check-only --profile black oidc_role_manager cli.py

    - name: Type check with mypy
      run: |
        mypy oidc_role_manager --ignore-missing-imports

    - name: Security check with bandit
      run: |
        bandit -r oidc_role_manager -c pyproject.toml

    - name: Test with pytest and enforce coverage
      run: |
        pytest tests/ -v --cov=oidc_role_manager --cov-report=xml --cov-report=term-missing --cov-fail-under=85
      env:
        COVERAGE_FAIL_UNDER: 85

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: Coverage comment
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 85
        MINIMUM_ORANGE: 70

  test-coverage-gate:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "‚ùå Tests failed or coverage is below 85%"
          echo "üö´ Deployment is blocked until test coverage reaches at least 85%"
          exit 1
        else
          echo "‚úÖ Tests passed with adequate coverage (‚â•85%)"
          echo "üöÄ Ready for deployment"
        fi

  package:
    runs-on: ubuntu-latest
    needs: test-coverage-gate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: |
        pip install twine
        twine check dist/*

  validate-for-deployment:
    runs-on: ubuntu-latest
    needs: test-coverage-gate
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Final coverage check before deployment
      run: |
        echo "üîç Running final coverage check before allowing deployment..."
        pytest tests/ --cov=oidc_role_manager --cov-fail-under=85 --quiet
        coverage_pct=$(coverage report --format=total)
        echo "üìä Current test coverage: ${coverage_pct}%"
        
        if [ "$coverage_pct" -lt 85 ]; then
          echo "‚ùå DEPLOYMENT BLOCKED: Test coverage ($coverage_pct%) is below required minimum (85%)"
          echo "üìù Please add more tests to increase coverage before deployment"
          exit 1
        else
          echo "‚úÖ DEPLOYMENT APPROVED: Test coverage ($coverage_pct%) meets requirements"
        fi
    
    - name: Validate configuration examples
      run: |
        echo "üîç Validating example configurations..."
        python cli.py validate --roles-dir roles/examples || true
    
    - name: Security final check
      run: |
        echo "üîí Running final security check..."
        bandit -r oidc_role_manager -c pyproject.toml -f json -o security-report.json
        safety check
    
    - name: Upload final security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: deployment-security-report
        path: security-report.json 